plugins {
    id 'com.bmuschko.docker-remote-api' version '3.2.3'
    id "com.github.johnrengelman.shadow" version "2.0.2"
}

group 'me.karakelley'
version 'server'

apply plugin: 'java'

import com.bmuschko.gradle.docker.tasks.image.*

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

test {
    useJUnitPlatform()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.1.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.1.0'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.8.0-beta1'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.3.0-alpha4'
    compile group: 'ch.qos.logback', name: 'logback-core', version: '1.3.0-alpha4'
    compile group: 'ch.qos.logback', name: 'logback-access', version: '1.3.0-alpha4'
}

jar {
    manifest {
        attributes(
                'Main-Class': 'me.karakelley.http.Main'
        )
    }
    baseName = "http"
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

docker {
    registryCredentials {
        username = getConfigurationProperty('DOCKER_USERNAME', 'docker.username')
        password = getConfigurationProperty('DOCKER_PWORD', 'docker.password')
        email = getConfigurationProperty('DOCKER_EMAIL', 'docker.email')
    }
}

task createDockerFile(type: Dockerfile) {
    group = 'Docker'
    def labels = [maintainer: "kkelley@8thlight.com"]

    destFile = project.file('build/docker/Dockerfile')
    from 'openjdk:8-jre-alpine'
    label labels
    copyFile 'libs/http-server.jar', 'libs/http-server.jar'
    entryPoint 'java', '-jar', 'libs/http-server.jar'
    exposePort 8080
    runCommand 'apk --update --no-cache add curl'
    instruction 'HEALTHCHECK CMD curl -f http://localhost:8080/health || exit 1'
}

task syncWebAppArchive(type: Sync) {
    dependsOn assemble
    from jar.path
    into createDockerFile.destFile.parentFile
}

createDockerFile.dependsOn syncWebAppArchive

task buildImage(type: DockerBuildImage, dependsOn: [createDockerFile]) {
    group = 'Docker'
    inputDir = project.file("build")
    dockerFile = createDockerFile.destFile
    tag = 'klkelley/http-server'
}

String getConfigurationProperty(String envVar, String sysProp) {
    System.getenv(envVar) ?: project.findProperty(sysProp)
}